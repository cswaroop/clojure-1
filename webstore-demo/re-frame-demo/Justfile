@list:
   just --list

# TODO: just db which runs a docker-compose which starts both local-dynamodb and local-postgres

# Start local Dynamodb emulator.
@dynamodb:
    cd dynamodb && ./run-docker-compose.sh

# Start local PostgreSQL database.
@postgres:
    cd postgres && ./run-docker-compose.sh

# Start local Datomic database.
@datomic:
    cd datomic && ./start-datomic.sh

# Reset Datomic SimpleServer databases.
@datomic-ss-reset:
    cd datomic && ./reset-simpleserver-db.sh

# Start Datomic Peer Server.
@datomic-peer-server:
    cd datomic && ./start-peer-server.sh

# Start Datomic Console.
@datomic-console:
    cd datomic && ./start-console.sh

# Start backend repl.
@backend:
    clj -M:dev:test:common:backend:postgres -m nrepl.cmdline -i -C

# Start backend repl with my toolbox.
@backend-kari:
    clj -M:dev:test:common:backend:postgres:kari -m nrepl.cmdline -i -C

# Start backend repl with my toolbox and with debug-repl capability.
@backend-debug-kari:
    clj -M:dev:test:common:backend:kari -m nrepl.cmdline -m com.gfredericks.debug-repl/wrap-debug-repl -i -C

# Init node packages.
@init:
   mkdir -p target
   mkdir -p classes
   npm install

# start frontend auto-compilation
@frontend:
    npm run dev

# SASS auto-compile
@css:
    npm run build:sass

# Start frontend auto-compilation.
# @frontend-kari:
#   clj -M:dev:common:frontend:kari -m shadow.cljs.devtools.cli watch app

# SASS auto-compile.
# @css:
# 	clj -Mcss --auto

# Update dependencies.
@outdated:
    clj -M:dev:test:common:backend:frontend:outdated --update

# Create uberjar.
@uberjar:
    npm run build:sass
    shadow-cljs release app
    mkdir -p prod-resources/public/js
    mkdir -p prod-resources/public/css
    cp dev-resources/public/js/main.js prod-resources/public/js/main.js
    cp dev-resources/public/css/style.css prod-resources/public/css/style.css
    clj -Adev:common:backend:uberjar

# Lint.
@lint:
    clj -M:dev -m clj-kondo.main --lint src

# Test.
@test db:
    ./run-tests.sh {{db}}

